{"version":3,"sources":["../../weather-app2/src/components/Titles.js","../../weather-app2/src/components/Form.js","../../weather-app2/src/components/Weather.js","../../weather-app2/src/App.js","../../weather-app2/src/index.js"],"names":["Titles","react_default","a","createElement","className","Form","_ref","getWeather","onHandlechange","inputcityname","onSubmit","type","name","onChange","value","placeholder","required","Weather","date","areaname","countryname","longitude","lattitude","temperature","humidity","description","wind","error","App","state","undefined","e","_this","setState","target","mydateConv","rawDate","Date","day","getDay","dateNo","getDate","month","getMonth","year","getFullYear","concat","tempConv","rawTemp","Math","round","_callee","api_call","data","currentTempDeg","customDate","regenerator_default","wrap","_context","prev","next","preventDefault","fetch","method","sent","status","json","console","log","main","temp","dt","sys","country","coord","lon","lat","weather","speed","t0","stop","this","_this$state","components_Titles","components_Form","components_Weather","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.05162732.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Titles = () => (\n  <div>\n    <h1 className=\"title-container__title\">Weather App</h1>\n    <h3 className=\"title-container__subtitle\">\n      Find out temperature, conditions and more...\n    </h3>\n  </div>\n);\n\nexport default Titles;\n","import React from \"react\";\n\nconst Form = ({ getWeather, onHandlechange, inputcityname }) => (\n  <form onSubmit={getWeather}>\n    <input\n      type=\"text\"\n      name=\"cityname\"\n      onChange={onHandlechange}\n      value={inputcityname}\n      placeholder=\"Enter City name\"\n      required\n    />\n    <button>Get Weather</button>\n  </form>\n);\n\nexport default Form;\n","import React from \"react\";\n\nconst Weather = ({ date, areaname, countryname, longitude, lattitude, temperature, humidity, description, wind, error}) => (\n  <div className=\"weather__info\">\n    {date && (\n      <p className=\"weather__key\">\n        Date : <span className=\"weather__value\">{date}</span>\n      </p>\n    )}\n\n    {areaname && countryname && (\n      <p className=\"weather__key\">\n        City / Country :{\" \"}\n        <span className=\"weather__value\">\n          {areaname} / {countryname}\n        </span>\n      </p>\n    )}\n\n{longitude && lattitude && (\n      <p className=\"weather__key\">\n        Coords. (Lon / Lat) :{\" \"}\n        <span className=\"weather__value\">\n          {longitude} / {lattitude}\n        </span>\n      </p>\n    )}\n\n    {temperature && (\n      <p className=\"weather__key\">\n        Temperature :{\" \"}\n        <span className=\"weather__value\">{temperature}</span>\n      </p>\n    )}\n\n    {humidity && (\n      <p className=\"weather__key\">\n        Humidity : <span className=\"weather__value\">{humidity}</span>\n      </p>\n    )}\n\n    {description && (\n      <p className=\"weather__key\">\n        Description :{\" \"}\n        <span className=\"weather__value\">{description}</span>\n      </p>\n    )}\n\n    {wind && (\n      <p className=\"weather__key\">\n        Wind : <span className=\"weather__value\">{wind}</span>\n      </p>\n    )}\n\n    {error && <p className=\"weather__error\">Error : {error}</p>}\n  </div>\n);\n\nexport default Weather;\n","import React, { Component } from \"react\";\nimport Titles from \"./components/Titles\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\n\nclass App extends Component {\n  // New state method introduced in React 16\n  // Good practice: Initial State is undefined because we do not know the API Data type (i.e number, string, boolean,etc) from the server data\n\n  state = {\n    areaname: undefined,\n    countryname: undefined,\n    date: undefined,\n    longitude: undefined,\n    lattitude: undefined,\n    temperature: undefined,\n    humidity: undefined,\n    description: undefined,\n    wind: undefined,\n    error: undefined,\n    inputcityname: \"\",\n  };\n\n// Gets city name\n  onHandlechange = (e) => {\n    this.setState({\n      inputcityname: e.target.value,\n    });\n  };\n\n  //Date customization\n      mydateConv = (rawDate) => {\n        const date = new Date(rawDate * 1000);\n        const Weeks = [\n          \"Sunday\",\n          \"Monday\",\n          \"Tuesday\",\n          \"Wednesday\",\n          \"Thursday\",\n          \"Friday\",\n          \"Saturday\",\n        ];\n        const day = Weeks[date.getDay()];\n        const dateNo = date.getDate();\n        const Months = [\n          \"January\",\n          \"February\",\n          \"March\",\n          \"April\",\n          \"May\",\n          \"June\",\n          \"July\",\n          \"August\",\n          \"September\",\n          \"October\",\n          \"November\",\n          \"December\",\n        ];\n        const month = Months[date.getMonth()];\n        const year = date.getFullYear();\n        const formattedDate = `${day} ${dateNo} ${month} ${year}`;\n        return formattedDate;\n      };\n  \n      //Temperature conversion\n      tempConv = (rawTemp) => {\n        const baseTemp = 273.15;\n        const currentTemp = Math.round(rawTemp - baseTemp);\n        const tempDeg = currentTemp + \"Â°c\";\n        return tempDeg;\n      }\n  \n  //async -- promised based response\n  getWeather = async (e) => {\n    e.preventDefault(); // to prevent browser's default behavior\n\n    const api_key = \"03d21204830a4280f098f00a5bf3de2d\";\n//    const cityname = e.target.cityname.value;\n\n    //fetching data from the server using API call, await used to wait until data fetched from the server\n    try {\n      const api_call = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?q=${this.state.inputcityname}&APPID=${api_key}`,\n        { method: \"GET\" }\n      );\n\n      if (api_call.status !== 200) {\n        this.setState({\n          areaname: undefined,\n          countryname: undefined,\n          date: undefined,\n          longitude: undefined,\n          lattitude: undefined,\n          temperature: undefined,\n          humidity: undefined,\n          description: undefined,\n          wind: undefined,\n          error: \"No Data Available with this City name, please try again.\",\n          inputcityname: \"\",\n        });\n      } else {\n        const data = await api_call.json();\n        console.log(\"Data fetched Successfully\");\n\n        const currentTempDeg = this.tempConv(data.main.temp);//temparature converted\n        const customDate = this.mydateConv(data.dt);//custom date converted\n\n        this.setState({\n          areaname: data.name,\n          countryname: data.sys.country,\n          date: customDate,\n          longitude: data.coord.lon,\n          lattitude: data.coord.lat,\n          temperature: currentTempDeg,\n          humidity: data.main.humidity,\n          description: data.weather[0].description,\n          wind: data.wind.speed,\n          error: \"\",\n          inputcityname: \"\",\n        });\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  render() {\n    const { areaname, countryname, date, longitude, lattitude, temperature, humidity, description, wind, error } = this.state;\n    return (\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container shadow \">\n              <div className=\"row\">\n                <div className=\"col-sm-5 title-container\">\n                  <Titles />\n                </div>\n                <div className=\"col-sm-7 form-container\">\n                <Form\n                    getWeather={this.getWeather}\n                    onHandlechange={this.onHandlechange}\n                    inputcityname={this.state.inputcityname}\n                  />\n                  <Weather\n                    areaname={areaname}\n                    countryname={countryname}\n                    date={date}\n                    longitude={longitude}\n                    lattitude={lattitude}\n                    temperature={temperature}\n                    humidity={humidity}\n                    description={description}\n                    wind={wind}\n                    error={error}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n// To find Weather information based on City name\n/* const API_KEY = 'https://api.openweathermap.org/data/2.5/weather?q=Madurai&APPID=03d21204830a4280f098f00a5bf3de2d'; */\n\n/*//API Response sample:\n\n/*\n{\"coord\":{\"lon\":139.6917,\"lat\":35.6895},\"weather\":[{\"id\":501,\"main\":\"Rain\",\"description\":\"moderate rain\",\"icon\":\"10d\"}],\"base\":\"stations\",\"main\":{\"temp\":288.52,\"feels_like\":288.25,\"temp_min\":286.37,\"temp_max\":290.72,\"pressure\":1014,\"humidity\":82},\"visibility\":8000,\"wind\":{\"speed\":5.14,\"deg\":340},\"rain\":{\"1h\":1.47},\"clouds\":{\"all\":75},\"dt\":1650265164,\"sys\":{\"type\":2,\"id\":2038398,\"country\":\"JP\",\"sunrise\":1650225909,\"sunset\":1650273348},\"timezone\":32400,\"id\":1850144,\"name\":\"Tokyo\",\"cod\":200}\n\n*/","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}